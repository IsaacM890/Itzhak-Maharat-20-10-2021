{"version":3,"sources":["components/autoComplete/AutoCompleteSearch.jsx","components/icon/Icon.js","constants/degreeUnit.js","utils/utils.js","components/card/Card.jsx","pages/Home.jsx","api/urls.js","api/apis.js","containers/HomeConatiner.jsx","components/header/Header.jsx","layout/Layout.jsx","style/GlobalStyle.js","App.js","reducers/appReducer.js","store/store.js","serviceWorker.js","index.js","constants/ActionTypes.js","components/typography/Typography.jsx","actions/actions.js","components/link/Link.jsx"],"names":["SAutocompleteSearch","styled","Autocomplete","width","AutocompleteSearch","autoCompleteList","onChange","onSelected","inputValue","id","options","e","option","getOptionLabel","LocalizedName","renderInput","params","TextField","label","InputProps","type","SIcon","img","Icon","src","alt","degreeUnitType","getWeatherIcon","icon","getDegreeUnit","degree","unit","degreeNumber","cToF","toFixed","SForecastCard","Card","backgroundColor","minWidth","display","flexBasis","height","alignItems","justifyContent","borderRadius","SCardDetailsBox","Box","flexDirection","days","ForecastCard","DailyForecasts","degreeUnit","useSelector","state","Typography","color","Date","getDay","Temperature","Minimum","Value","Maximum","Day","IconPhrase","SAutocompleteBox","margin","maxWidth","SWeatherDetailsBox","SAddToFavoritesIconBox","padding","SCityDetailsWrapper","flexWrap","SCityCaptionBox","marginLeft","SIconBox","STopSectionBox","SMiddleSectionBox","SBottomSectionBox","rowGap","Home","props","forecast","locationValue","locations","addToFav","selectedLocation","currentConditions","isCurrentLocationInFavList","AutoCompleteSearch","Object","keys","length","WeatherIcon","Country","size","ID","Metric","IconButton","onClick","sx","fontSize","printWeatherDetailsTopSection","Headline","align","Text","printWeatherDetailsMiddleSection","map","item","index","printWeatherDetailsBottomSection","API_KEY","baseURL","endPoints","autoCompleteListAPI","query","axios","get","currentConditionsAPI","cityKey","fiveDaysForecastAPI","HomeContainer","useState","setLocationValue","favorites","dispatch","useDispatch","debounceAutoComplete","debounce","val","getLocationsAutoComplete","value","a","response","setLocations","data","console","error","message","getForecast","setForecast","getCurrentConditions","setCurrentConditions","location","Key","setSelectedLocation","find","URLSearchParams","useLocation","search","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","lat","lon","getLocationKeyByGeoLocation","target","removeFromFavorites","addToFavorites","SAppBar","AppBar","SToolbar","Toolbar","fontFamily","SLinkBox","SwitchLabels","themeMode","FormGroup","FormControlLabel","theme","checked","setDarkMode","control","Switch","setDegreeUnit","handleDegreeUnit","Header","Link","to","SWrapper","SMainContent","SHeaderBox","Layout","children","darkMode","lightMode","Sstyle","createGlobalStyle","GlobalStyle","Favorites","React","lazy","App","Suspense","fallback","path","exact","component","intialState","store","createStore","payload","ActionTypes","GET_LOCATIONS_LIST","ON_LOCATION_SELECT","GET_FIVE_DAYS_FORECAST","GET_CURRENT_CONDITIONS","ADD_TO_FAVORITES","REMOVE_FROM_FAVORITES","filter","GET_DEGREE_UNIT","GET_DARK_MODE","window","__REDUX_DEVTOOLS_EXTENSION__","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","STypography","MatTypography","degreeSymbol","variant","getSize","conditions","favorite","SLink","RouteLink","textDecoration","marginRight"],"mappings":"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","file":"static/js/main.ee0094ab.chunk.js","sourcesContent":["/** @format */\r\n\r\nimport * as React from 'react';\r\nimport { styled } from '@mui/material/styles';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SAutocompleteSearch = styled(Autocomplete)({\r\n  width: '100%',\r\n});\r\n\r\nconst AutocompleteSearch = ({\r\n  autoCompleteList = [],\r\n  onChange,\r\n  onSelected,\r\n  inputValue,\r\n}) => (\r\n  <SAutocompleteSearch\r\n    id='autocomplete-serach-box'\r\n    inputValue={inputValue}\r\n    options={autoCompleteList}\r\n    onChange={(e, option) => onSelected(option)}\r\n    getOptionLabel={(option) => option.LocalizedName}\r\n    renderInput={(params) => (\r\n      <TextField\r\n        onChange={onChange}\r\n        {...params}\r\n        label='Search City...'\r\n        InputProps={{\r\n          ...params.InputProps,\r\n          type: 'search',\r\n        }}\r\n      />\r\n    )}\r\n  />\r\n);\r\n\r\nAutocompleteSearch.propTypes = {\r\n  autoCompleteList: PropTypes.array,\r\n  onChange: PropTypes.func,\r\n  inputValue: PropTypes.string,\r\n};\r\n\r\nexport default AutocompleteSearch;\r\n","/** @format */\r\n\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst SIcon = styled.img`\r\n  width: 120px;\r\n  height: 120px;\r\n  margin-right: 20px;\r\n`;\r\n\r\nconst Icon = ({src = 'https://via.placeholder.com/120?text=N/A', alt}) => {\r\n  return <SIcon src={src} alt={alt} /> ;\r\n};\r\n\r\nexport default Icon;\r\n","/** @format */\r\n\r\nexport const degreeUnitType = {\r\n  CELSIUS: 'Celsius',\r\n  FAHRENHEIT: 'Fahrenheit',\r\n};\r\n\r\n\r\n\r\n\r\n","/** @format */\r\nimport { degreeUnitType } from '../constants/degreeUnit';\r\n\r\nexport const getWeatherIcon = (icon) => {\r\n  if (!icon) return;\r\n\r\n  const imgSrc = `https://vortex.accuweather.com/adc2010/images/slate/icons/${icon}.svg`;\r\n  return imgSrc;\r\n};\r\n\r\nexport const getDegreeUnit = (degree, unit) => {\r\n  if (!degree) return '';\r\n\r\n  const degreeNumber = unit === degreeUnitType.CELSIUS ? degree : cToF(degree);\r\n\r\n  return unit === degreeUnitType.CELSIUS\r\n    ? `${degreeNumber.toFixed(1)}C`\r\n    : `${degreeNumber.toFixed(1)}F`;\r\n};\r\n\r\nconst cToF = (degree) => degree * (9 / 5) + 32;\r\n","/** @format */\r\n\r\nimport * as React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport Box from '@mui/material/Box';\r\nimport { styled } from '@mui/material/styles';\r\nimport Card from '@mui/material/Card';\r\nimport Typography from '../typography/Typography';\r\nimport { getDegreeUnit } from '../../utils/utils';\r\n\r\nconst SForecastCard = styled(Card)({\r\n  backgroundColor: 'rgba(255,255,255,0.5)',\r\n  minWidth: '180px',\r\n  display: 'flex',\r\n  flexBasis: '15%',\r\n  height: '220px',\r\n  alignItems: 'center',\r\n  justifyContent: 'center',\r\n  borderRadius: '10px',\r\n});\r\n\r\nconst SCardDetailsBox = styled(Box)({\r\n  display: 'flex',\r\n  height: '60%',\r\n  width: '100%',\r\n  flexDirection: 'column',\r\n  alignItems: 'center',\r\n  justifyContent: 'space-between',\r\n});\r\n\r\nconst days = [\r\n  'Sunday',\r\n  'Monday',\r\n  'Tuesday',\r\n  'Wednsday',\r\n  'Thursday',\r\n  'Friday',\r\n  'Saturday',\r\n];\r\n\r\nconst ForecastCard = ({ DailyForecasts }) => {\r\n  const { degreeUnit } = useSelector((state) => state);\r\n  return (\r\n    <SForecastCard>\r\n      <SCardDetailsBox>\r\n        <Typography color='white'>\r\n          {days[new Date(DailyForecasts?.Date).getDay()]}\r\n        </Typography>\r\n        <Typography degree>\r\n          {getDegreeUnit(\r\n            DailyForecasts?.Temperature.Minimum?.Value,\r\n            degreeUnit\r\n          )}\r\n        </Typography>\r\n        <Typography degree>\r\n          {getDegreeUnit(\r\n            DailyForecasts?.Temperature.Maximum?.Value,\r\n            degreeUnit\r\n          )}\r\n        </Typography>\r\n        <Typography>{DailyForecasts?.Day?.IconPhrase}</Typography>\r\n      </SCardDetailsBox>\r\n    </SForecastCard>\r\n  );\r\n};\r\n\r\nexport default ForecastCard;\r\n","/** @format */\r\n\r\nimport React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport { styled } from '@mui/material/styles';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport AutoCompleteSearch from '../components/autoComplete/AutoCompleteSearch';\r\nimport Icon from '../components/icon/Icon';\r\nimport { getWeatherIcon, getDegreeUnit } from '../utils/utils';\r\nimport Typography from '../components/typography/Typography';\r\nimport Card from '../components/card/Card';\r\n\r\nconst SAutocompleteBox = styled(Box)({\r\n  display: 'flex',\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n  margin: '20px auto',\r\n  maxWidth: '400px',\r\n});\r\n\r\nconst SWeatherDetailsBox = styled(Box)({\r\n  display: 'flex',\r\n  justifyContent: 'space-between',\r\n  flexDirection: 'column',\r\n  borderRadius: '20px',\r\n  backgroundColor: 'rgba(255,255,255,0.3)',\r\n});\r\n\r\nconst SAddToFavoritesIconBox = styled(Box)({\r\n  padding: '20px',\r\n});\r\n\r\nconst SCityDetailsWrapper = styled(Box)({\r\n  height: '200px',\r\n  width: '400px',\r\n  display: 'flex',\r\n  flexDirection: 'row',\r\n  padding: '20px',\r\n  flexWrap: 'wrap',\r\n});\r\n\r\nconst SCityCaptionBox = styled(Box)({\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n  marginLeft: '20px',\r\n});\r\n\r\nconst SIconBox = styled(Box)({\r\n  display: 'flex',\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n});\r\n\r\nconst STopSectionBox = styled(Box)`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  @media (max-width: 750px) {\r\n    flex-direction: column-reverse;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n  }\r\n`;\r\nconst SMiddleSectionBox = styled(Box)({\r\n  width: '100%',\r\n  padding: '40px 0',\r\n});\r\n\r\nconst SBottomSectionBox = styled(Box)({\r\n  display: 'flex',\r\n  padding: '15px',\r\n  flexDirection: 'row',\r\n  justifyContent: 'space-evenly',\r\n  flexWrap: 'wrap',\r\n  rowGap: '15px',\r\n});\r\n\r\nconst Home = (props) => {\r\n  const {\r\n    forecast,\r\n    locationValue,\r\n    onSelected,\r\n    onChange,\r\n    locations,\r\n    addToFav,\r\n    selectedLocation,\r\n    currentConditions,\r\n    degreeUnit,\r\n    isCurrentLocationInFavList,\r\n  } = props;\r\n\r\n\r\n\r\n  const getFavIconColor = () => {\r\n    return isCurrentLocationInFavList() ? 'red' : 'gray';\r\n  };\r\n\r\n  const printWeatherDetailsTopSection = () => {\r\n    const show =\r\n      Object.keys(selectedLocation).length &&\r\n      Object.keys(currentConditions).length;\r\n\r\n    if (!show) return;\r\n\r\n    return (\r\n      <STopSectionBox>\r\n        <SCityDetailsWrapper>\r\n          <SIconBox>\r\n            <Icon\r\n              src={getWeatherIcon(currentConditions?.WeatherIcon)}\r\n              alt='weather icon'\r\n            />\r\n          </SIconBox>\r\n          <SCityCaptionBox>\r\n            {selectedLocation?.LocalizedName && selectedLocation.Country && (\r\n              <Typography size='x-large'>\r\n                {selectedLocation.LocalizedName +\r\n                  ', ' +\r\n                  selectedLocation.Country?.ID}\r\n              </Typography>\r\n            )}\r\n            {currentConditions.Temperature && (\r\n              <Typography degree size='large'>\r\n                {getDegreeUnit(\r\n                  currentConditions.Temperature?.Metric.Value,\r\n                  degreeUnit\r\n                )}\r\n              </Typography>\r\n            )}\r\n          </SCityCaptionBox>\r\n        </SCityDetailsWrapper>\r\n        <SAddToFavoritesIconBox>\r\n          <IconButton onClick={addToFav}>\r\n            <FavoriteIcon sx={{ color: getFavIconColor() }} fontSize='large' />\r\n          </IconButton>\r\n        </SAddToFavoritesIconBox>\r\n      </STopSectionBox>\r\n    );\r\n  };\r\n\r\n  const printWeatherDetailsMiddleSection = () => {\r\n    return (\r\n      forecast?.Headline && (\r\n        <SMiddleSectionBox>\r\n          <Typography align='center' size='large'>\r\n            {forecast.Headline?.Text}\r\n          </Typography>\r\n        </SMiddleSectionBox>\r\n      )\r\n    );\r\n  };\r\n\r\n  const printWeatherDetailsBottomSection = () => {\r\n    return (\r\n      forecast?.DailyForecasts && (\r\n        <SBottomSectionBox>\r\n          {forecast?.DailyForecasts?.map((item, index) => (\r\n            <Card key={index} DailyForecasts={item} />\r\n          ))}\r\n        </SBottomSectionBox>\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <SAutocompleteBox>\r\n        <AutoCompleteSearch\r\n          autoCompleteList={locations}\r\n          onChange={onChange}\r\n          onSelected={onSelected}\r\n          inputValue={locationValue}\r\n        />\r\n      </SAutocompleteBox>\r\n      <SWeatherDetailsBox>\r\n        {printWeatherDetailsTopSection()}\r\n        {printWeatherDetailsMiddleSection()}\r\n        {printWeatherDetailsBottomSection()}\r\n      </SWeatherDetailsBox>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","/** @format */\r\n\r\nconst API_KEY = 'W8ay9BMGUdgLh7r9Xn4zHkXDTSN4kGSA';\r\n\r\nexport const baseURL = {\r\n  getLocationkey:\r\n    'https://dataservice.accuweather.com/locations/v1/cities/geoposition/search',\r\n  autocompleteSearchURL:\r\n    'https://dataservice.accuweather.com/locations/v1/cities/autocomplete',\r\n  currentConditionsURL:\r\n    'https://dataservice.accuweather.com/currentconditions/v1/',\r\n  dailyForecastURL:\r\n    'https://dataservice.accuweather.com/forecasts/v1/daily/1day/',\r\n  fiveDaysForecastURL:\r\n    'https://dataservice.accuweather.com/forecasts/v1/daily/5day/',\r\n};\r\n\r\nexport const endPoints = {\r\n  searchPoint: `?apikey=${API_KEY}&q=`,\r\n  basic: `?apikey=${API_KEY}&details=true`,\r\n};\r\n","/** @format */\r\n\r\nimport { baseURL, endPoints } from './urls';\r\nimport axios from 'axios';\r\n\r\nexport const getLocationKeyAPI = (lat, lon) =>\r\n  axios.get(baseURL.getLocationkey + endPoints.searchPoint + `${lat},${lon}`);\r\n\r\nexport const autoCompleteListAPI = (query) =>\r\n  axios.get(baseURL.autocompleteSearchURL + endPoints.searchPoint + query);\r\n\r\nexport const currentConditionsAPI = (cityKey) =>\r\n  axios.get(baseURL.currentConditionsURL + cityKey + endPoints.basic);\r\n\r\nexport const dailyForecastAPI = (cityKey) =>\r\n  axios.get(baseURL.dailyForecastURL + cityKey + endPoints.basic);\r\n\r\nexport const fiveDaysForecastAPI = (cityKey) =>\r\n  axios.get(baseURL.fiveDaysForecastURL + cityKey + endPoints.basic);\r\n\r\n\r\n  ","/** @format */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useLocation } from 'react-router-dom';\r\nimport debounce from 'lodash.debounce';\r\nimport Home from '../pages/Home';\r\nimport {\r\n  autoCompleteListAPI,\r\n  fiveDaysForecastAPI,\r\n  currentConditionsAPI,\r\n  getLocationKeyAPI,\r\n} from '../api/apis';\r\nimport {\r\n  setLocations,\r\n  setSelectedLocation,\r\n  setForecast,\r\n  setCurrentConditions,\r\n  addToFavorites,\r\n  removeFromFavorites,\r\n} from '../actions/actions';\r\n\r\nconst HomeContainer = () => {\r\n  const [locationValue, setLocationValue] = useState('');\r\n  const {\r\n    favorites,\r\n    locations,\r\n    selectedLocation,\r\n    forecast,\r\n    currentConditions,\r\n    degreeUnit,\r\n  } = useSelector((state) => state); // distructure\r\n  const dispatch = useDispatch();\r\n\r\n  const debounceAutoComplete = debounce(\r\n    (val) => getLocationsAutoComplete(val),\r\n    500\r\n  );\r\n\r\n  const getLocationsAutoComplete = async (value) => {\r\n    try {\r\n      const response = await autoCompleteListAPI(value);\r\n      dispatch(setLocations(response.data));\r\n    } catch (e) {\r\n      console.error(e.message);\r\n    }\r\n  };\r\n\r\n  const getForecast = async (cityKey) => {\r\n    try {\r\n      const response = await fiveDaysForecastAPI(cityKey);\r\n      dispatch(setForecast(response.data));\r\n    } catch (e) {\r\n      console.error(e.message);\r\n    }\r\n  };\r\n\r\n  const getCurrentConditions = async (cityKey) => {\r\n    try {\r\n      const response = await currentConditionsAPI(cityKey);\r\n      dispatch(setCurrentConditions(response.data[0]));\r\n    } catch (e) {\r\n      console.error(e.message);\r\n    }\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    const { value } = e.target;\r\n    setLocationValue(value);\r\n  };\r\n\r\n  const onSelected = (location) => {\r\n    if (location?.Key) {\r\n      dispatch(setSelectedLocation(location));\r\n      getCurrentConditions(location.Key);\r\n      getForecast(location.Key);\r\n    }\r\n  };\r\n\r\n  const isCurrentLocationInFavList = () => {\r\n    const currentLocation = favorites?.find(\r\n      (location) => location.Key === selectedLocation.Key\r\n    );\r\n    return currentLocation || false;\r\n  };\r\n\r\n  const addToFav = () => {\r\n    if (!isCurrentLocationInFavList()) {\r\n      dispatch(\r\n        addToFavorites({\r\n          ...currentConditions,\r\n          LocalizedName: selectedLocation.LocalizedName,\r\n          Key: selectedLocation.Key,\r\n        })\r\n      );\r\n    } else {\r\n      dispatch(removeFromFavorites(selectedLocation.Key));\r\n    }\r\n  };\r\n\r\n  const getLocationKeyByGeoLocation = () => {\r\n    try {\r\n      navigator.geolocation?.getCurrentPosition(async (position) => {\r\n        const { latitude, longitude } = position.coords;\r\n        if (latitude && longitude) {\r\n          const response = await getLocationKeyAPI(latitude, longitude);\r\n          response?.data && onSelected(response.data);\r\n        }\r\n      });\r\n    } catch (e) {\r\n      console.error(e.message);\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    dispatch(setCurrentConditions({}));\r\n    dispatch(setForecast({}));\r\n    dispatch(setCurrentConditions({}));\r\n  };\r\n\r\n  let query = new URLSearchParams(useLocation().search);\r\n\r\n  useEffect(() => {\r\n    if (query.get('citykey')) {\r\n      getForecast(query.get('citykey'));\r\n      getCurrentConditions(query.get('citykey'));\r\n    } else {\r\n      getLocationKeyByGeoLocation();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (locationValue) {\r\n      debounceAutoComplete(locationValue);\r\n    } else {\r\n      reset();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [locationValue]);\r\n\r\n  return (\r\n    <Home\r\n      forecast={forecast}\r\n      locationValue={locationValue}\r\n      onSelected={onSelected}\r\n      onChange={onChange}\r\n      locations={locations}\r\n      addToFav={addToFav}\r\n      selectedLocation={selectedLocation}\r\n      currentConditions={currentConditions}\r\n      degreeUnit={degreeUnit}\r\n      isCurrentLocationInFavList={isCurrentLocationInFavList}\r\n    />\r\n  );\r\n};\r\n\r\nexport default HomeContainer;\r\n","/** @format */\r\n\r\nimport * as React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setDegreeUnit, setDarkMode } from '../../actions/actions';\r\nimport { styled } from '@mui/material/styles';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Switch from '@mui/material/Switch';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '../typography/Typography';\r\nimport Link from '../link/Link';\r\n\r\nconst SAppBar = styled(AppBar)({\r\n  display: 'flex',\r\n  position: 'static',\r\n});\r\n\r\nconst SToolbar = styled(Toolbar)({\r\n  display: 'flex',\r\n  justifyContent: 'space-between',\r\n  alignItems: 'center',\r\n  fontFamily: 'Poppins',\r\n});\r\n\r\nconst SLinkBox = styled(Box)({\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n});\r\n\r\nconst SwitchLabels = () => {\r\n  const { degreeUnit, themeMode } = useSelector((state) => state);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleDegreeUnit = (degreeUnit) => {\r\n    dispatch(setDegreeUnit(degreeUnit));\r\n  };\r\n  const handleThemeMode = (e) => {\r\n    const theme = e.target.checked ? 'dark' : 'light';\r\n    dispatch(setDarkMode(theme));\r\n  };\r\n\r\n  return (\r\n    <FormGroup>\r\n      <FormControlLabel\r\n        onChange={handleThemeMode}\r\n        control={<Switch />}\r\n        label={themeMode}\r\n      />\r\n      <FormControlLabel\r\n        onChange={(e) => handleDegreeUnit(e.target.value)}\r\n        control={<Switch value={degreeUnit} />}\r\n        label={degreeUnit}\r\n      />\r\n    </FormGroup>\r\n  );\r\n};\r\n\r\nconst Header = () => {\r\n  return (\r\n    <SAppBar color='transparent'>\r\n      <SToolbar>\r\n        <Typography size='large'>Herolo Weather</Typography>\r\n        <SLinkBox>\r\n          <SwitchLabels />\r\n          <Link to='/'>\r\n            <Typography size='medium'>Home</Typography>\r\n          </Link>\r\n          <Link to='/favorites'>\r\n            <Typography size='medium'>Favorites</Typography>\r\n          </Link>\r\n        </SLinkBox>\r\n      </SToolbar>\r\n    </SAppBar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","/** @format */\r\n\r\nimport React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport { styled } from '@mui/material/styles';\r\nimport Header from '../components/header/Header';\r\n\r\nconst SWrapper = styled(Box)`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst SMainContent = styled(Box)`\r\n  width: 80%;\r\n  height: 100%;\r\n  margin-top: 20px;\r\n  flex-basis: 90%;\r\n  @media (max-width: 800px) {\r\n    width: 90%;\r\n  }\r\n`;\r\n\r\nconst SHeaderBox = styled(Box)`\r\n  flex-basis: 10%;\r\n  width: 100%;\r\n`;\r\n\r\nconst Layout = ({ children }) => (\r\n  <SWrapper>\r\n    <SHeaderBox>\r\n      <Header />\r\n    </SHeaderBox>\r\n    <SMainContent>{children}</SMainContent>\r\n  </SWrapper>\r\n);\r\n\r\nexport default Layout;\r\n","/** @format */\r\n\r\nimport React from 'react';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst darkMode = {\r\n  background: '#393e46',\r\n};\r\nconst lightMode = {\r\n  background: '#e8d5b7',\r\n};\r\n\r\nconst Sstyle = createGlobalStyle`\r\nbody {\r\n    background: ${({ theme }) =>\r\n      theme === 'light' ? lightMode.background : darkMode.background};\r\n    transition:all 0.25s linear\r\n    color:white\r\n  }\r\n`;\r\n\r\nconst GlobalStyle = () => {\r\n  const { themeMode } = useSelector((state) => state);\r\n  return <Sstyle theme={themeMode} />;\r\n};\r\n\r\nexport default GlobalStyle;\r\n","/** @format */\n\nimport React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './containers/HomeConatiner';\nimport Layout from './layout/Layout';\nimport GlobalStyle from './style/GlobalStyle';\nconst Favorites = React.lazy(() => import('./containers/FavoritesConatiner'));\n\nconst App = () => {\n  return (\n    <React.Suspense fallback={<p>Loading...</p>}>\n      <Router>\n        <Layout>\n          <GlobalStyle />\n          <Switch>\n            <Route path='/' exact component={Home} />\n            <Route path='/favorites' component={Favorites} />\n          </Switch>\n        </Layout>\n      </Router>\n    </React.Suspense>\n  );\n};\n\nexport default App;\n","/** @format */\r\n\r\nimport { ActionTypes } from '../constants/ActionTypes';\r\nimport { degreeUnitType } from '../constants/degreeUnit';\r\n\r\nconst intialState = {\r\n  locations: [],\r\n  selectedLocation: {},\r\n  forecast: {},\r\n  currentConditions: {},\r\n  favorites: [],\r\n  degreeUnit: degreeUnitType.CELSIUS,\r\n  themeMode: 'light',\r\n};\r\n\r\nexport const AppReducer = (state = intialState, { type, payload }) => {\r\n  switch (type) {\r\n    case ActionTypes.GET_LOCATIONS_LIST:\r\n      return { ...state, locations: payload };\r\n    case ActionTypes.ON_LOCATION_SELECT:\r\n      return { ...state, selectedLocation: payload };\r\n    case ActionTypes.GET_FIVE_DAYS_FORECAST:\r\n      return { ...state, forecast: payload };\r\n    case ActionTypes.GET_CURRENT_CONDITIONS:\r\n      return { ...state, currentConditions: payload };\r\n    case ActionTypes.ADD_TO_FAVORITES:\r\n      return { ...state, favorites: [...state.favorites, payload] };\r\n    case ActionTypes.REMOVE_FROM_FAVORITES:\r\n      return {\r\n        ...state,\r\n        favorites: state.favorites.filter(\r\n          (location) => location.Key !== payload\r\n        ),\r\n      };\r\n    case ActionTypes.GET_DEGREE_UNIT:\r\n      return {\r\n        ...state,\r\n        degreeUnit:\r\n          payload === degreeUnitType.CELSIUS\r\n            ? degreeUnitType.FAHRENHEIT\r\n            : degreeUnitType.CELSIUS,\r\n      };\r\n    case ActionTypes.GET_DARK_MODE:\r\n      return {\r\n        ...state,\r\n        themeMode: payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","/** @format */\n\nimport { createStore } from 'redux';\n\nimport { AppReducer } from '../reducers/appReducer';\n\nconst store = createStore(\n  AppReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","/** @format */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport store from './store/store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/** @format */\r\n\r\nexport const ActionTypes = {\r\n  GET_LOCATIONS_LIST: 'GET_LOCATIONS_LIST',\r\n  ON_LOCATION_SELECT: 'ON_LOCATION_SELECT',\r\n\r\n  GET_CURRENT_CONDITIONS: 'GET_CURRENT_CONDITIONS',\r\n  GET_FIVE_DAYS_FORECAST: 'GET_FIVE_DAYS_FORECAST',\r\n\r\n  ADD_TO_FAVORITES: 'ADD_TO_FAVORITES',\r\n  REMOVE_FROM_FAVORITES: 'REMOVE_FROM_FAVORITES',\r\n\r\n  GET_DEGREE_UNIT: 'GET_DEGREE_UNIT',\r\n  GET_DARK_MODE: 'GET_DARK_MODE',\r\n};\r\n","/** @format */\r\n\r\nimport * as React from 'react';\r\nimport MatTypography from '@mui/material/Typography';\r\nimport { styled } from '@mui/material/styles';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst STypography = styled(MatTypography)({\r\n  fontFamily: 'Poppins',\r\n});\r\n\r\nconst Typography = ({\r\n  children,\r\n  size = 'small',\r\n  onClick,\r\n  align = 'left',\r\n  degree,\r\n}) => {\r\n  const handleClick = () => {\r\n    if (onClick) {\r\n      onClick();\r\n    }\r\n  };\r\n\r\n  const getSize = () => {\r\n    switch (size) {\r\n      case 'x-large':\r\n        return 'h4';\r\n      case 'large':\r\n        return 'h5';\r\n      case 'medium':\r\n        return 'h6';\r\n      case 'small':\r\n      case 'x-small':\r\n        return 'subtitle2';\r\n      default:\r\n        return 'subtitle1';\r\n    }\r\n  };\r\n  const degreeSymbol = degree ? '°' : '';\r\n  return (\r\n    <STypography variant={getSize()} onClick={handleClick} align={align}>\r\n      {children}\r\n      {degreeSymbol}\r\n    </STypography>\r\n  );\r\n};\r\n\r\nTypography.propTypes = {\r\n  onClick: PropTypes.func,\r\n  size: PropTypes.string,\r\n};\r\n\r\nexport default Typography;\r\n","/** @format */\r\n\r\nimport { ActionTypes } from '../constants/ActionTypes';\r\n\r\nexport const setLocations = (locations) => {\r\n  return {\r\n    type: ActionTypes.GET_LOCATIONS_LIST,\r\n    payload: locations,\r\n  };\r\n};\r\n\r\nexport const setSelectedLocation = (location) => {\r\n  return {\r\n    type: ActionTypes.ON_LOCATION_SELECT,\r\n    payload: location,\r\n  };\r\n};\r\n\r\nexport const setForecast = (forecast) => {\r\n  return {\r\n    type: ActionTypes.GET_FIVE_DAYS_FORECAST,\r\n    payload: forecast,\r\n  };\r\n};\r\n\r\nexport const setCurrentConditions = (conditions) => {\r\n  return {\r\n    type: ActionTypes.GET_CURRENT_CONDITIONS,\r\n    payload: conditions,\r\n  };\r\n};\r\n\r\nexport const addToFavorites = (favorite) => {\r\n  return {\r\n    type: ActionTypes.ADD_TO_FAVORITES,\r\n    payload: favorite,\r\n  };\r\n};\r\n\r\nexport const removeFromFavorites = (favorite) => {\r\n  return {\r\n    type: ActionTypes.REMOVE_FROM_FAVORITES,\r\n    payload: favorite,\r\n  };\r\n};\r\n\r\nexport const setDegreeUnit = (degreeUnit) => {\r\n  return {\r\n    type: ActionTypes.GET_DEGREE_UNIT,\r\n    payload: degreeUnit,\r\n  };\r\n};\r\nexport const setDarkMode = (darkMode) => {\r\n  return {\r\n    type: ActionTypes.GET_DARK_MODE,\r\n    payload: darkMode,\r\n  };\r\n};\r\n","/** @format */\r\n\r\nimport * as React from 'react';\r\nimport { Link as RouteLink } from 'react-router-dom';\r\nimport { styled } from '@mui/material/styles';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SLink = styled(RouteLink)({\r\n  textDecoration: 'none',\r\n  display: 'flex',\r\n  justifyContent: 'space-between',\r\n  alignItems: 'center',\r\n  marginRight: 10,\r\n});\r\n\r\nconst Link = ({ children, to }) => {\r\n  return <SLink to={to}>{children}</SLink>;\r\n};\r\n\r\nLink.propTypes = {\r\n  to: PropTypes.string,\r\n};\r\n\r\nexport default Link;\r\n"],"sourceRoot":""}